# Generated by Django 5.2.3 on 2025-07-03 02:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Quizes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32)),
                ('category', models.CharField(max_length=16)),
                ('questions', models.JSONField(default=list)),
                ('difficulty', models.CharField(choices=[('eazy', 'легкая'), ('medium', 'средняя'), ('hard', 'высокая'), ('mixed', 'смешанная')])),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('total_games', models.PositiveBigIntegerField(default=0)),
                ('possible_points', models.PositiveIntegerField(default=0)),
                ('earned_points', models.PositiveIntegerField(default=0)),
                ('avatar', models.CharField(default='1.png', max_length=64)),
                ('friends', models.JSONField(blank=True, default=list)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='server_users_set', related_query_name='server_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='server_users_set', related_query_name='server_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lobby',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=8, unique=True)),
                ('password', models.CharField(blank=True, max_length=16, null=True)),
                ('visability', models.CharField(choices=[('public', 'публичная'), ('private', 'скрытая'), ('friends', 'видна друзьям')])),
                ('status', models.CharField(choices=[('waiting', 'ожидание'), ('starting', 'запуск')])),
                ('max_players', models.PositiveBigIntegerField(default=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quiz_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.quizes')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_lobbies', to='server.users')),
                ('players', models.ManyToManyField(related_name='joined_lobbies', to='server.users')),
            ],
            options={
                'indexes': [models.Index(fields=['key'], name='server_lobb_key_06c8e1_idx'), models.Index(fields=['status', 'visability'], name='server_lobb_status_39ac5e_idx')],
            },
        ),
        migrations.CreateModel(
            name='UsersOnQuizes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('possible_points', models.PositiveIntegerField(default=0)),
                ('earned_points', models.PositiveIntegerField(default=0)),
                ('date', models.DateField(auto_now_add=True)),
                ('quiz_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.quizes')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.users')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user_id', 'quiz_id')},
            },
        ),
    ]
